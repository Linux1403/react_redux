{"version":3,"sources":["redux/Constant.js","redux/actions/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADDPERSON","increment","value","type","Count","state","greet","selectNumber","props","decrement","oddIncrement","console","log","count","asyncIncrement","incrementAsync","this","persons","length","ref","c","onClick","Component","connect","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","ageNode","personObj","id","nanoid","placeholder","map","item","App","InitState","combineReducers","preState","action","createStore","allReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.667fa6e9.chunk.js","sourcesContent":["export const INCREMENT ='increment'\r\nexport const DECREMENT ='decrement'\r\nexport const ADDPERSON='addPerson'\r\n","import {INCREMENT,DECREMENT} from '../Constant'\r\nexport const increment=value=>({type:INCREMENT,value})\r\nexport const decrement=value=>({type:DECREMENT,value})\r\n\r\n\r\n// 异步action 实质就是action的值为函数  异步action会调用同步action\r\n// 异步action不是必须要写的\r\nexport const incrementAsync= (value,time)=>{\r\n    return (\r\n        (dispatch)=>{\r\n            setTimeout(()=>{\r\n                dispatch(increment(value))\r\n            },time)\r\n        }\r\n    )\r\n}\r\n","// 引入connect 用于连接UI组件和redux\r\nimport {connect} from 'react-redux'\r\nimport {increment,decrement,incrementAsync} \r\nfrom '../../redux/actions/count'\r\nimport React, { Component } from \"react\";\r\n\r\n\r\nclass Count extends Component {\r\n  state = {\r\n    greet: \"王一博 和 杨洋 祝你快乐永远\",\r\n  };\r\n\r\n  increment = () => {\r\n    const { value } = this.selectNumber;\r\n    this.props.increment(value*1)\r\n   \r\n  };\r\n  decrement = () => {\r\n    const { value } = this.selectNumber;\r\n    this.props.decrement(value*1)\r\n\r\n  };\r\n  oddIncrement = () => {\r\n    const { value } = this.selectNumber;\r\n    console.log(\"哈哈 这里是奇数加\")\r\n    console.log(this.props)\r\n    const {count} = this.props\r\n    console.log(count)\r\n    if(count%2!==0){\r\n      this.props.increment(value*1)\r\n    }\r\n  \r\n  };\r\n  asyncIncrement = () => {\r\n    const { value } = this.selectNumber;\r\n    this.props.incrementAsync(value,500)\r\n   \r\n  };\r\n  render() {\r\n    console.log(this.props)\r\n    return (\r\n      <div>\r\n        <h1>我是count组件---Person组件人数为：{this.props.persons.length}</h1>\r\n        <h2>当前求和为：{this.props.count}</h2>\r\n        <select ref={(c) => (this.selectNumber = c)}>\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n        </select>\r\n        <button onClick={this.increment}> + </button>\r\n        <button onClick={this.decrement}> - </button>\r\n        <button onClick={this.oddIncrement}>当前和为奇数进行加</button>\r\n        <button onClick={this.asyncIncrement}>异步加</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// //第三种写法\r\nexport default connect(\r\n    state=>({count:state.count,persons:state.persons}),\r\n    // 写成一个对象 点到为止  让别人来dispatch\r\n    {\r\n        increment,\r\n        decrement,\r\n        incrementAsync\r\n    }\r\n)(Count)\r\n\r\n\r\n\r\n// //第二种写法\r\n// export default connect(state=>{\r\n//     return {count:state}\r\n// }\r\n// ,dispatch=>{\r\n//     return {\r\n//         jia:number=>{\r\n//             dispatch(incrementAction(number))\r\n//         },\r\n//         jian:number=>{\r\n//             dispatch(decreamentAction(number))\r\n//         },\r\n//         incrementAsyncAction:(number,time)=>{\r\n//             dispatch(incrementAsyncAction(number,time))\r\n//         }\r\n//     }\r\n// })(CountUI)\r\n\r\n\r\n// a的返回的对象中的key 就作为传递给UI组件props的key\r\n// value就作为传递给了UI组件props的value\r\n\r\n// // 第一种写法\r\n// function mapStateToProps(state){\r\n//     return {count:state}\r\n// }\r\n\r\n// function mapDispatchToProps(dispatch){\r\n//     return {\r\n//         jia:number=>{\r\n//             dispatch(incrementAction(number))\r\n//         },\r\n//         jian:number=>{\r\n//             dispatch(decreamentAction(number))\r\n//         },\r\n//         incrementAsyncAction:(number,time)=>{\r\n//             dispatch(incrementAsyncAction(number,time))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// connect（）（）可以看出connect是一个函数 返回的也是一个函数\r\n// export default connect(mapStateToProps,mapDispatchToProps)(CountUI)\r\n\r\n","import React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {addPerson} from \"../../redux/actions/person\"\r\n\r\nclass Person extends Component {\r\n    addPerson=()=>{\r\n        const name = this.nameNode.value\r\n        const age = this.ageNode.value\r\n        const personObj = {id:nanoid(),name,age}\r\n        console.log(personObj)\r\n        this.props.addPerson(personObj)\r\n        this.nameNode.value=''\r\n        this.ageNode.value=''\r\n    }\r\n    render() {\r\n        console.log(\"hhh\")\r\n        console.log(this.props)\r\n        return (\r\n            <div>\r\n                <hr></hr>\r\n                <h2>我是Person组件 上面count组件的和为{this.props.count}</h2>\r\n                <input ref={c=>this.nameNode=c} placeholder=\"请输入姓名\"></input>\r\n                <br></br>\r\n                <input ref={c=>this.ageNode=c} placeholder=\"请输入年龄\"></input>\r\n                <br></br>\r\n                <button onClick={this.addPerson}>添加</button>\r\n                <br></br>\r\n              <ul>\r\n                { \r\n                     this.props.persons.map((item)=>{\r\n                      return <li key={item.id}>\r\n                          姓名：{item.name}----年龄：{item.age}\r\n                      </li>\r\n                  })\r\n                  }\r\n              </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state=>({count:state.count,persons:state.persons}),\r\n    {\r\n        addPerson\r\n    }\r\n)(Person)","import {ADDPERSON} from '../Constant'\r\nexport const addPerson=(personObj)=>({type:ADDPERSON,personObj})","import React, { Component } from 'react'\nimport Count from  './containers/Count'//引入的是容器组件 而不是UI组件\n// import Sum  from './containers/Sum'\nimport Person from './containers/Person'\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        {/* 给容器组件传递store */}\n        <Count></Count>\n        {/* <Sum></Sum> */}\n        <Person></Person>\n      </div>\n    )\n  }\n}\n","import {ADDPERSON} from '../Constant'\r\n\r\nconst InitState=[{id:'001',name:'王一博',age:23}]\r\nexport default function PersonReducer(preState=InitState,action){\r\n    console.log(\"personreducer------\")\r\n    console.log(action)\r\n    const {type,personObj}=action\r\n    switch(type){\r\n        case ADDPERSON:\r\n            // redux会进行浅比较 如果用unshift这些东西 不会进行更新渲染\r\n            // 纯函数：输入1 输出1\r\n            // 不得改写参数数据（改了就不是纯函数）\r\n            // 不能产生任何副作用 例如网络请求 输入输出设备\r\n            // 不能调用Date.now等不纯函数\r\n            // 所以在这里不能用unshift等\r\n            return [personObj,...preState];\r\n        default:\r\n            return preState;\r\n    }\r\n    \r\n\r\n}","// 引入为Count组件服务的reducer\r\nimport count from './count'\r\n// 引入为Person组件服务的reducer\r\nimport persons from './person'\r\n\r\nimport {combineReducers} from 'redux'\r\n\r\n\r\n\r\n// 汇总所有的reducer变为一个\r\n// combineReducers是个函数 他传入的对象就是redux帮我们保存的总状态的对象\r\n// 保存两个数值 count组件求和的数值 person组件一堆人的信息 数组\r\nexport default combineReducers({\r\n    count,\r\n    persons\r\n})\r\n","/*\r\n    这个文件用于创建一个为Count组件服务的reducer，reducer的本质是一个函数\r\n*/\r\nimport {INCREMENT,DECREMENT} from '../Constant'\r\n\r\nconst InitState = 0\r\nexport default function countReducer(preState=InitState,action){\r\n    console.log(\"countreducer------\")\r\n    console.log(\"preState \"+preState)\r\n    const {type,value} = action\r\n    console.log(\"value \"+value)\r\n    console.log(\"type \"+type)\r\n    switch(type){\r\n        case INCREMENT:\r\n            return preState+value*1;\r\n        case DECREMENT:\r\n            return preState-value*1;\r\n        default:\r\n            return preState;\r\n    }\r\n\r\n}","/*\r\n    该文件专门用于暴露一个store对象 整个应用只有一个store对象\r\n*/\r\n\r\n// 引入createStore 专门用于创建redux中最为核心的store对象\r\nimport {createStore,applyMiddleware} from 'redux'\r\nimport allReducer from '../redux/reducers'\r\n\r\n\r\n// 有异步任务 引入redux-thunk 用于支持异步action\r\nimport thunk from 'redux-thunk'\r\n\r\n// 引入redux-devtools-extension  开发者工具的使用\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\n\r\n\r\n// 暴露store\r\n\r\nexport default createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\n// 有了这个Provider  就不用再给每个组件传递store了\n// 引用了react-redux之后 不用再自己监测更新了\nimport {Provider} from 'react-redux'\n\n\nReactDOM.render(\n  // 此处需要Provider包裹App,目的是让App所有的后代容器\n  // 组件都能接收到store\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById(\"root\")\n  );\n\n"],"sourceRoot":""}